Things that will need to be fixed:

Service.py - gen_service creates vulnerabilities in a way that allows future versions to have more vulnerabilties
"When a new vulnerability is introduced for a service at a specific version, the attack complexity AC and impact I are randomly selected. This aspect was inspired
by the CVSS scoring system, which is a widely adopted metric in the cyber security industry to describe the severity of known vulnerabilities [30]. The vulnerability
will then remain in proceeding versions of the service since the vulnerability was introduced for a mean of 10 versions, at which point it was assumed that the vendor
of the service would of identified and patched the vulnerability."

Variance of entry points 

1. Add attack scenario where targetted node
2. Reclassify diversity techniques 


Research Context Manager (Action Manager)
Research Topological sort
Combine IP and Port Scan
2 Weeks - New Attack Scenario (attacker knows the target host when neighbouring) Set the distance for target node?
2 weeks - Diversity



Things that need to be done:

Practical Applications of Shuffle Techniques
    Port Shuffle - Benchmark with ???
    Complete Topology Shuffle - Can't use EPV as every host is target? 
    Host Shuffle - ???
    OS Shuffle - ???
    Service Shuffle - Benchmark against Expected Path Variation (Need to calculate probability of each host of compromise?)
Developing Diversity MTD Techniques
    Code Diversity - Every Service has x configurations of vulnerabilities 
    Software Stack Diversity - Every Host x configurations of services it cycles through?
    Programming Language Diversity 
    Network Diversity - Deploy different network configurations (What is difference to network topology shuffle?)
Implement Dynamic Security Measures
    Attack Path Variation (APV) 
    Attack Path Exposure (APE)

RoA Thresholding?
Non-Important Fixes/Additions: 

Network.py - Different Network Generations than just Barabasi-Albert Random Graph model
Network.py - Network Generation code optimisations

OS Shuffle -> OS Diversity
Service Shuffle -> Service Diversity? (Needs to be changed)

Add attack scenario where targetted node Breakdown
	Scorer.py: Add Target Metrics to scorer (At time target was seen, time target was compromised) 
	Develop new metrics for effectiveness of shuffle techniques:
		IP Shuffle: Works Same as before
		Port Shuffle: Works Same as before
		Complete Topology Shuffle: 
		Host Shuffle:
			 
		OS Diversity:
		Service Diversity:

Attackers pop top from Host.stack (hacker.py)
Delete services with no vulnerabilities

Attacker Scan Network
	Hacker.py start_network_enum 
		Network.scan(compromised_hosts)
		*Gets list of hosts (uncompromised_hosts)
		Creates Action
			Actions.py (create Action with check_ips + check_paths)
-> Performs Port Scan 
-> Selects Host?	


When the exposed nodes are assigned/labelled (Assigned at initiation of network.py using, first nodes) -> Apply topological Sort -> Partition Network (add tags based on proportion)
    
Attacker Priority -> Target -> Tag -> First in First Out



- ask about attacking strategy 
    - Currently pulls list, then attacks all nodes in order until completed
    - nAttack before stopping Threshold
    - Wait for MTD?

Trim Services that don't have vulnerabilities
Attack doesn't stop until target node is compromised
Add metrics
Check Vuln Numbers

Attack node limit amount of times
Attack attempt counter

Target Network: Target node compromised = stop
Other Network: 80% of network is compromised? = stop
UML of Simulator

1e Run for error checking + dump results
    Run simulator x times tile % error is less than 5%
    Error - 
Vuln/cost required to attack host

2. Metrics


APE


Path Number: https://networkx.org/documentation/stable/reference/algorithms/simple_paths.html?highlight=path
	Questions: 
		What is max depth?
		Should we consider it at a vulnerability level or host level?

Expected Path Variant

shortest path -> check the nodes -> vulnerabilities -> evaluate the Variation

1 - 23 - 56

1 - vuln 1, 2, 3, 4, 5 -> subset
23 - vuln 1, 6, 7, 8, 9
56 - vuln 2, 3, 8, 10, 11

100%

0%

                 List vulnerabilities required to compromise services on Host
                    Compare to list of already needed vulnerabilities
                    Host Score = (# of Vulnerabilities - # of Seen Vulnerabilities) / # of Vulnerabilities
                    Total Score = Sum of Host Scores/ # of Hosts  

                    Example:
                    Host 1: 1,2,3,4,5,6
                    Host 2: 7,2,4,8,9,10,11
                    Host 3: 12,13,5,6,9

                    Score: ( 1 + (7-2)/7 + (5-3)/5 ) / 3 

                    Problems : 
                        Doesn't consider the % investment the vulnerability is of the total time investment
                        Doesn't consider if previous Vulnerabilities which have been exploited but aren't listed as optimal vulnerabilities
                        Doesn't consider the other paths to target

            Modified Version:
                For a randomly selected path to target Node
                    List vulnerabilities required to compromise services on Host
                    Compare to list of already needed vulnerabilities
                    Host Score = (1 - Sum of RoA of seen Vulnerabilities/ Sum of RoA of Vulnerabillities Used) 
                    Total Score = Sum of Host Scores/ # of Hosts  

                    Example:
                    Host 1: 1,2,3,4,5,6
                    Host 2: 7,2,4,8,9,10,11
                    Host 3: 12,13,5,6,9

                    Score: ( 1 + (1-0.3) + (1-0.6) ) / 3

                    Problems: 
                        Doesn't Consider if previous Vulnerabilities which have been exploited but aren't listed as optimal vulnerabilities
                        Doesn't consider the other paths to target